name: pack-triton-wheel
on:
  workflow_dispatch:
    inputs:
      py_version:
        description: "Python tag (311 for Py3.11)"
        required: true
        default: "311"
      torch_version:
        description: "Torch version (no +cu, e.g. 2.8.0)"
        required: true
        default: "2.8.0"
      torch_channel:
        description: "Torch channel: cu128 | cpu"
        required: true
        default: "cu128"
      triton_candidates:
        description: "Triton versions (comma-separated)"
        required: true
        default: "3.2.0,3.3.0,3.4.0"

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Vars
        id: v
        run: |
          echo "PLAT1=manylinux_2_35_x86_64" >> $GITHUB_OUTPUT
          echo "PLAT2=manylinux2014_x86_64" >> $GITHUB_OUTPUT
          echo "PYTAG=${{ inputs.py_version }}" >> $GITHUB_OUTPUT
          echo "TORCH_VER=${{ inputs.torch_version }}" >> $GITHUB_OUTPUT
          echo "TORCH_CH=${{ inputs.torch_channel }}" >> $GITHUB_OUTPUT
          echo "TRITON_LIST=${{ inputs.triton_candidates }}" >> $GITHUB_OUTPUT

      - name: Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Tools
        run: python -m pip install -U pip

      - name: Create wheelhouse
        run: mkdir -p wheelhouse

      - name: Download Triton wheels (manylinux_2_35 first)
        run: |
          IFS=',' read -ra VS <<< "${{ steps.v.outputs.TRITON_LIST }}"
          for tv in "${VS[@]}"; do
            python -m pip download "triton==${tv}" \
              --platform ${{ steps.v.outputs.PLAT1 }} \
              --only-binary=:all: \
              --implementation cp \
              --python-version ${{ steps.v.outputs.PYTAG }} \
              -d wheelhouse || true
          done

      - name: Fallback (manylinux2014)
        run: |
          IFS=',' read -ra VS <<< "${{ steps.v.outputs.TRITON_LIST }}"
          for tv in "${VS[@]}"; do
            python -m pip download "triton==${tv}" \
              --platform ${{ steps.v.outputs.PLAT2 }} \
              --only-binary=:all: \
              --implementation cp \
              --python-version ${{ steps.v.outputs.PYTAG }} \
              -d wheelhouse || true
          done

      - name: "(Optional) Download torch 2.8.0+cu128 for offline smoke test"
        run: |
          CH=${{ steps.v.outputs.TORCH_CH }}
          TV=${{ steps.v.outputs.TORCH_VER }}
          if [ "$CH" = "cpu" ]; then
            python -m pip download "torch==${TV}" \
              --platform ${{ steps.v.outputs.PLAT2 }} \
              --only-binary=:all: --implementation cp \
              --python-version ${{ steps.v.outputs.PYTAG }} \
              -d wheelhouse
          else
            python -m pip download "torch==${TV}+${CH}" \
              --index-url "https://download.pytorch.org/whl/${CH}" \
              --platform ${{ steps.v.outputs.PLAT2 }} \
              --only-binary=:all: --implementation cp \
              --python-version ${{ steps.v.outputs.PYTAG }} \
              -d wheelhouse || true
          fi

      - name: "Add offline installer (no network) & README"
        run: |
          cat > install_triton_offline.sh <<'SH'
          #!/usr/bin/env bash
          set -euo pipefail
          WHEEL_DIR="${1:-wheelhouse}"

          echo "[*] Offline install Triton from local wheelhouse: $WHEEL_DIR"
          # 仅本地安装，不联网
          if ls "$WHEEL_DIR"/torch-*.whl >/dev/null 2>&1; then
            echo " - Found local torch wheel; installing first..."
            python -m pip install --no-index --find-links "$WHEEL_DIR" torch || true
          fi

          ok=""
          # 按版本号从高到低尝试安装第一个能 import 的 triton
          for whl in $(ls "$WHEEL_DIR"/triton-*.whl 2>/dev/null | sort -Vr); do
            echo " - Trying $(basename "$whl")"
            if python -m pip install --no-index --find-links "$WHEEL_DIR" "$whl"; then
              if python - <<'PY'
                import importlib
                m = importlib.import_module("triton")
                print("Imported Triton:", getattr(m, "__version__", "?"))
                PY
              then
                ok="yes"; break
              fi
            fi
          done

          if [ -z "$ok" ]; then
            echo "[-] Could not import Triton after local install. Check Python version and torch ABI." >&2
            exit 1
          fi

          cat <<'TIP'

          [OK] Triton installed (offline).
          如果你暂时不想依赖编译链（clang/ptxas），可以先让 vLLM 用 Torch 原语：
              export VLLM_USE_V1=1
              export VLLM_PRIMITIVE_BACKEND=TORCH
              unset VLLM_ATTENTION_BACKEND VLLM_USE_TRITON VLLM_USE_FLASH_ATTENTION VLLM_USE_FLASHINFER

          真正启用 Triton/FA 获取更高性能时，请先在目标机离线安装编译链（见 install_toolchain_offline.sh）。
          TIP
          SH
          chmod +x install_triton_offline.sh

          cat > README_TRITON.txt <<'TXT'
          # Offline Triton Install (NO NETWORK)
          内容：
            - wheelhouse/: triton 多版本 .whl（Linux x86_64, Py3.11），以及可选 torch 轮子
            - install_triton_offline.sh：完全离线安装脚本（仅本地 wheel）
          使用：
            1) 把整个包拷到目标机；激活你的 Python 环境
            2) 执行：bash install_triton_offline.sh wheelhouse
            3) 验证：python -c "import triton; print(triton.__version__)"
          想避免编译：
            export VLLM_USE_V1=1; export VLLM_PRIMITIVE_BACKEND=TORCH
          想启用 Triton/FA：
            先离线安装编译链（见 toolchain_debs.tgz 内的 install_toolchain_offline.sh）
          TXT

      - name: "Pack Triton artifact"
        run: |
          tar -czf triton_wheels.tgz wheelhouse install_triton_offline.sh README_TRITON.txt
          du -h triton_wheels.tgz

      - name: "Upload Triton artifact"
        uses: actions/upload-artifact@v4
        with:
          name: triton_bundle_py${{ inputs.py_version }}_torch${{ inputs.torch_version }}_${{ inputs.torch_channel }}
          path: |
            triton_wheels.tgz
            install_triton_offline.sh
            README_TRITON.txt
          retention-days: 30

      # === 可选：把编译链也预打包成 .deb（完全离线安装） ===
      - name: "(Optional) Download toolchain .deb (offline install later)"
        run: |
          sudo apt-get update
          # 下载但不安装，把 clang/llvm/lld/build-essential 及其依赖放进缓存
          sudo apt-get install -y --download-only build-essential pkg-config
          # clang-18 优先，不行就 clang-16
          (sudo apt-get install -y --download-only clang-18 llvm-18 lld-18) || \
          (sudo apt-get install -y --download-only clang-16 llvm-16 lld-16)
          mkdir -p debs
          cp -v /var/cache/apt/archives/*.deb debs/ || true

      - name: "Add offline toolchain installer"
        run: |
          cat > install_toolchain_offline.sh <<'SH'
          #!/usr/bin/env bash
          set -euo pipefail
          DEB_DIR="${1:-debs}"
          echo "[*] Offline install toolchain from $DEB_DIR (*.deb only, no network)"
          # 多轮 dpkg 安装，直到依赖满足
          rounds=5
          for i in $(seq 1 $rounds); do
            echo " - dpkg round $i"
            sudo dpkg -i "$DEB_DIR"/*.deb || true
            # 如果还缺依赖会报错，继续下一轮；完全离线环境下不要调用 apt -f install
          done
          # 刷新链接库缓存
          sudo ldconfig || true
          echo "[OK] Toolchain installed (offline). Try:"
          echo "  clang --version | head -n1"
          SH
          chmod +x install_toolchain_offline.sh

      - name: "Pack Toolchain artifact"
        run: |
          tar -czf toolchain_debs.tgz debs install_toolchain_offline.sh
          du -h toolchain_debs.tgz

      - name: "Upload Toolchain artifact"
        uses: actions/upload-artifact@v4
        with:
          name: toolchain_debs_ubuntu2204
          path: |
            toolchain_debs.tgz
            install_toolchain_offline.sh
          retention-days: 30
